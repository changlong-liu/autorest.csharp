// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Net;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.TestFramework;
using MgmtKeyvault;
using NUnit.Framework;

namespace MgmtKeyvault.Tests.Mock
{
    /// <summary> Test for PrivateEndpointConnection. </summary>
    public partial class PrivateEndpointConnectionContainerMockTests : MockTestBase
    {
        public PrivateEndpointConnectionContainerMockTests(bool isAsync) : base(isAsync, RecordedTestMode.Record)
        {
            ServicePointManager.ServerCertificateValidationCallback += (sender, cert, chain, sslPolicyErrors) => true;
        }

        private async Task<MgmtKeyvault.PrivateEndpointConnectionContainer> GetPrivateEndpointConnectionContainerAsync(string resourceGroupName, string vaultName)
        {
            ResourceGroup resourceGroup = await TestHelper.CreateResourceGroupAsync(resourceGroupName, GetArmClient());
            VaultContainer vaultContainer = resourceGroup.GetVaults();
            Vault vault = await TestHelper.CreateOrUpdateExampleInstanceAsync(vaultContainer, vaultName);
            PrivateEndpointConnectionContainer privateEndpointConnectionContainer = vault.GetPrivateEndpointConnections();
            return privateEndpointConnectionContainer;
        }

        private MgmtKeyvault.PrivateEndpointConnectionContainer GetPrivateEndpointConnectionContainer(string resourceGroupName, string vaultName)
        {
            ResourceGroup resourceGroup = TestHelper.CreateResourceGroup(resourceGroupName, GetArmClient());
            VaultContainer vaultContainer = resourceGroup.GetVaults();
            Vault vault = TestHelper.CreateOrUpdateExampleInstance(vaultContainer, vaultName);
            PrivateEndpointConnectionContainer privateEndpointConnectionContainer = vault.GetPrivateEndpointConnections();
            return privateEndpointConnectionContainer;
        }

        [TestCase]
        [RecordedTest]
        public async Task CreateOrUpdateAsync()
        {
            // Example: KeyVaultPutPrivateEndpointConnection
            var container = await GetPrivateEndpointConnectionContainerAsync("sample-group", "sample-vault");
            await TestHelper.PutExampleInstanceAsync(container, "sample-pec");
        }

        [TestCase]
        [RecordedTest]
        public void CreateOrUpdate()
        {
            // Example: KeyVaultPutPrivateEndpointConnection
            var container = GetPrivateEndpointConnectionContainer("sample-group", "sample-vault");
            TestHelper.PutExampleInstance(container, "sample-pec");
        }

        [TestCase]
        [RecordedTest]
        public async Task GetAsync()
        {
            // Example: KeyVaultGetPrivateEndpointConnection
            var container = await GetPrivateEndpointConnectionContainerAsync("sample-group", "sample-vault");
            await TestHelper.GetExampleInstanceAsync(container, "sample-pec");
        }

        [TestCase]
        [RecordedTest]
        public void Get()
        {
            // Example: KeyVaultGetPrivateEndpointConnection
            var container = GetPrivateEndpointConnectionContainer("sample-group", "sample-vault");
            TestHelper.GetExampleInstance(container, "sample-pec");
        }
    }
}
