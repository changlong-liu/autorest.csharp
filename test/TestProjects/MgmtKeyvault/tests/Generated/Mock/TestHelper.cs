// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core.TestFramework;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using MgmtKeyvault;
using MgmtKeyvault.Models;
using NUnit.Framework;

namespace MgmtKeyvault.Tests
{
    /// <summary> Test Extension for MgmtKeyvault. </summary>
    public static partial class TestHelper
    {
        public static async Task<MgmtKeyvault.Vault> CreateOrUpdateExampleInstanceAsync(VaultContainer container, string vaultName)
        {
            // Example: Create a new vault or update an existing vault
            var parameters = new VaultCreateOrUpdateParameters("westus", new VaultProperties(System.Guid.Parse("00000000-0000-0000-0000-000000000000"), new Sku(new MgmtKeyvault.Models.SkuFamily("A"), SkuName.Standard))
            {
                EnabledForDeployment = true,
                EnabledForDiskEncryption = true,
                EnabledForTemplateDeployment = true,
            });

            var operation = await container.CreateOrUpdateAsync(vaultName, parameters);
            return operation.Value;
        }

        public static MgmtKeyvault.Vault CreateOrUpdateExampleInstance(VaultContainer container, string vaultName)
        {
            // Example: Create a new vault or update an existing vault
            var parameters = new VaultCreateOrUpdateParameters("westus", new VaultProperties(System.Guid.Parse("00000000-0000-0000-0000-000000000000"), new Sku(new MgmtKeyvault.Models.SkuFamily("A"), SkuName.Standard))
            {
                EnabledForDeployment = true,
                EnabledForDiskEncryption = true,
                EnabledForTemplateDeployment = true,
            });

            var operation = container.CreateOrUpdate(vaultName, parameters);
            return operation.Value;
        }

        public static async Task<MgmtKeyvault.Vault> GetExampleInstanceAsync(VaultContainer container, string vaultName)
        {
            // Example: Retrieve a vault

            var operation = await container.GetAsync(vaultName);
            return operation.Value;
        }

        public static MgmtKeyvault.Vault GetExampleInstance(VaultContainer container, string vaultName)
        {
            // Example: Retrieve a vault

            var operation = container.Get(vaultName);
            return operation.Value;
        }

        public static async Task<MgmtKeyvault.DeletedVault> GetExampleInstanceAsync(DeletedVaultContainer container, string vaultName)
        {
            // Example: Retrieve a deleted vault

            var operation = await container.GetAsync(vaultName);
            return operation.Value;
        }

        public static MgmtKeyvault.DeletedVault GetExampleInstance(DeletedVaultContainer container, string vaultName)
        {
            // Example: Retrieve a deleted vault

            var operation = container.Get(vaultName);
            return operation.Value;
        }

        public static async Task<MgmtKeyvault.PrivateEndpointConnection> PutExampleInstanceAsync(PrivateEndpointConnectionContainer container, string privateEndpointConnectionName)
        {
            // Example: KeyVaultPutPrivateEndpointConnection
            var properties = new PrivateEndpointConnectionData()
            {
                Etag = "",
                PrivateLinkServiceConnectionState = new PrivateLinkServiceConnectionState()
                {
                    Status = new MgmtKeyvault.Models.PrivateEndpointServiceConnectionStatus("Approved"),
                    Description = "My name is Joe and I'm approving this.",
                },
            };

            var operation = await container.CreateOrUpdateAsync(privateEndpointConnectionName, properties);
            return operation.Value;
        }

        public static MgmtKeyvault.PrivateEndpointConnection PutExampleInstance(PrivateEndpointConnectionContainer container, string privateEndpointConnectionName)
        {
            // Example: KeyVaultPutPrivateEndpointConnection
            var properties = new PrivateEndpointConnectionData()
            {
                Etag = "",
                PrivateLinkServiceConnectionState = new PrivateLinkServiceConnectionState()
                {
                    Status = new MgmtKeyvault.Models.PrivateEndpointServiceConnectionStatus("Approved"),
                    Description = "My name is Joe and I'm approving this.",
                },
            };

            var operation = container.CreateOrUpdate(privateEndpointConnectionName, properties);
            return operation.Value;
        }

        public static async Task<MgmtKeyvault.PrivateEndpointConnection> GetExampleInstanceAsync(PrivateEndpointConnectionContainer container, string privateEndpointConnectionName)
        {
            // Example: KeyVaultGetPrivateEndpointConnection

            var operation = await container.GetAsync(privateEndpointConnectionName);
            return operation.Value;
        }

        public static MgmtKeyvault.PrivateEndpointConnection GetExampleInstance(PrivateEndpointConnectionContainer container, string privateEndpointConnectionName)
        {
            // Example: KeyVaultGetPrivateEndpointConnection

            var operation = container.Get(privateEndpointConnectionName);
            return operation.Value;
        }

        public static async Task<MgmtKeyvault.ManagedHsm> CreateOrUpdateExampleInstanceAsync(ManagedHsmContainer container, string name)
        {
            // Example: Create a new managed HSM Pool or update an existing managed HSM Pool
            var parameters = new ManagedHsmData("westus")
            {
                Properties = new ManagedHsmProperties()
                {
                    TenantId = System.Guid.Parse("00000000-0000-0000-0000-000000000000"),
                    EnableSoftDelete = true,
                    SoftDeleteRetentionInDays = 90,
                    EnablePurgeProtection = true,
                },
                Sku = new ManagedHsmSku(new MgmtKeyvault.Models.ManagedHsmSkuFamily("B"), ManagedHsmSkuName.StandardB1),
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>() { { "Dept", "hsm" }, { "Environment", "dogfood" }, });
            var operation = await container.CreateOrUpdateAsync(name, parameters);
            return operation.Value;
        }

        public static MgmtKeyvault.ManagedHsm CreateOrUpdateExampleInstance(ManagedHsmContainer container, string name)
        {
            // Example: Create a new managed HSM Pool or update an existing managed HSM Pool
            var parameters = new ManagedHsmData("westus")
            {
                Properties = new ManagedHsmProperties()
                {
                    TenantId = System.Guid.Parse("00000000-0000-0000-0000-000000000000"),
                    EnableSoftDelete = true,
                    SoftDeleteRetentionInDays = 90,
                    EnablePurgeProtection = true,
                },
                Sku = new ManagedHsmSku(new MgmtKeyvault.Models.ManagedHsmSkuFamily("B"), ManagedHsmSkuName.StandardB1),
            };
            parameters.Tags.ReplaceWith(new Dictionary<string, string>() { { "Dept", "hsm" }, { "Environment", "dogfood" }, });
            var operation = container.CreateOrUpdate(name, parameters);
            return operation.Value;
        }

        public static async Task<MgmtKeyvault.ManagedHsm> GetExampleInstanceAsync(ManagedHsmContainer container, string name)
        {
            // Example: Retrieve a managed HSM Pool

            var operation = await container.GetAsync(name);
            return operation.Value;
        }

        public static MgmtKeyvault.ManagedHsm GetExampleInstance(ManagedHsmContainer container, string name)
        {
            // Example: Retrieve a managed HSM Pool

            var operation = container.Get(name);
            return operation.Value;
        }

        public static async Task<ResourceGroup> CreateResourceGroupAsync(string resourceGroupName, ArmClient client)
        {
            var rgop = await client.DefaultSubscription.GetResourceGroups().CreateOrUpdateAsync
            (
            resourceGroupName,
            new ResourceGroupData(client.DefaultSubscription.ToString()) { Tags = { { "test", "env" } } }
            ); return rgop.Value;
        }

        public static ResourceGroup CreateResourceGroup(string resourceGroupName, ArmClient client)
        {
            return client.DefaultSubscription.GetResourceGroups().CreateOrUpdate
            (
            resourceGroupName,
            new ResourceGroupData(client.DefaultSubscription.ToString()) { Tags = { { "test", "env" } } }
            ).Value;
        }

        public static IDictionary<string, string> ReplaceWith(this IDictionary<string, string> dest, IDictionary<string, string> src)
        {
            dest.Clear();
            foreach (var kv in src)
            {
                dest.Add(kv);
            }
            return dest;
        }
    }
}
